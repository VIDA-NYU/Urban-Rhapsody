{"version":3,"file":"map-heatmap-layer.d.ts","sources":["map-heatmap-layer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/// <reference types=\"googlemaps\" />\nimport { OnDestroy, OnInit, NgZone, OnChanges, SimpleChanges } from '@angular/core';\nimport { GoogleMap } from '../google-map/google-map';\n/** Possible data that can be shown on a heatmap layer. */\nexport declare type HeatmapData = google.maps.MVCArray<google.maps.LatLng | google.maps.visualization.WeightedLocation | google.maps.LatLngLiteral> | (google.maps.LatLng | google.maps.visualization.WeightedLocation | google.maps.LatLngLiteral)[];\n/**\n * Angular directive that renders a Google Maps heatmap via the Google Maps JavaScript API.\n *\n * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n */\nexport declare class MapHeatmapLayer implements OnInit, OnChanges, OnDestroy {\n    private readonly _googleMap;\n    private _ngZone;\n    /**\n     * Data shown on the heatmap.\n     * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n     */\n    set data(data: HeatmapData);\n    private _data;\n    /**\n     * Options used to configure the heatmap. See:\n     * developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayerOptions\n     */\n    set options(options: Partial<google.maps.visualization.HeatmapLayerOptions>);\n    private _options;\n    /**\n     * The underlying google.maps.visualization.HeatmapLayer object.\n     *\n     * See: https://developers.google.com/maps/documentation/javascript/reference/visualization\n     */\n    heatmap?: google.maps.visualization.HeatmapLayer;\n    constructor(_googleMap: GoogleMap, _ngZone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /**\n     * Gets the data that is currently shown on the heatmap.\n     * See: developers.google.com/maps/documentation/javascript/reference/visualization#HeatmapLayer\n     */\n    getData(): HeatmapData;\n    /** Creates a combined options object using the passed-in options and the individual inputs. */\n    private _combineOptions;\n    /**\n     * Most Google Maps APIs support both `LatLng` objects and `LatLngLiteral`. The latter is more\n     * convenient to write out, because the Google Maps API doesn't have to have been loaded in order\n     * to construct them. The `HeatmapLayer` appears to be an exception that only allows a `LatLng`\n     * object, or it throws a runtime error. Since it's more convenient and we expect that Angular\n     * users will load the API asynchronously, we allow them to pass in a `LatLngLiteral` and we\n     * convert it to a `LatLng` object before passing it off to Google Maps.\n     */\n    private _normalizeData;\n    /** Asserts that the heatmap object has been initialized. */\n    private _assertInitialized;\n}\n"]}